#!/bin/bash

set -e

# This script will terminate all drone agents that are in 'error' state. This
# happens occasionally, and we have not been able to pin down the exact reason
# why. This was created when we were using the following versions, and may not
# be needed if future bugfixes resolve this issue.
#
# - drone/autoscaler:1.8.2
# - drone/drone:1.9.0
#
# If it's too fancy for you, you can always run the following command.
#
# ```
# drone server ls -l | grep error | awk '{print $1}' | xargs -tL1 drone server destroy`
# ```
#
# Potential upgrades:
# - gather count metrics regularly and publish to CloudWatch
# - publish execution events to Slack
# - convert to a Rake task for consistency

export DRONE_SERVER=https://drone.cdn-code.org
export DRONE_AUTOSCALER=https://drone.cdn-code.org:8443

log_group_name="/drone/agent-terminations"
log_stream_name="single-log-stream"

# Function to log a message to CloudWatch
log_to_cloudwatch() {
    message=$1
    
    # TODO: create these in the drone stack so we know they exist
    # TODO: grant permission in the iam stack to write to this group/stream for eng readonly+
    # Create log group if it doesn't exist
    aws logs describe-log-groups --log-group-name-prefix "$log_group_name" | grep -q "$log_group_name" || aws logs create-log-group --log-group-name "$log_group_name"
    # Create log stream if it doesn't exist
    aws logs describe-log-streams --log-group-name "$log_group_name" --log-stream-name-prefix "$log_stream_name" | grep -q "$log_stream_name" || aws logs create-log-stream --log-group-name "$log_group_name" --log-stream-name "$log_stream_name"
    
    # Log the message
    aws logs put-log-events --log-group-name "$log_group_name" --log-stream-name "$log_stream_name" --log-events "timestamp=$(date +%s%3N),message=\"$message\""
}

# Function to get drone server metrics and set global variables
get_drone_metrics() {
    total_count=$(drone server ls -l | tail -n +2 | wc -l)
    error_ids=$(drone server ls -l | grep error | awk '{print $1}')
    error_count=$(if [ -z "$error_ids" ]; then echo 0; else echo "$error_ids" | wc -l; fi)
    healthy_count=$((total_count - error_count))
}

# Check if DRONE_TOKEN is valid
if ! output=$(drone server ls 2>&1); then
    echo "$output"
    echo -e "\nError executing \`drone server ls\`. Ensure DRONE_TOKEN is set correctly.\n"
    echo -e "\texport DRONE_TOKEN=<your_drone_token>"
    echo -e "\nObtain your DRONE_TOKEN from https://drone.cdn-code.org/account. For more information, see the 'Drone Continuous Integration System' document in the Engineering Drive.\n"
    exit 1
fi

# Get initial metrics
get_drone_metrics

# Log the termination event
log_to_cloudwatch "Terminating ${error_count} of ${total_count} drone agents that were in 'error' state. Total: ${total_count}, Healthy: ${healthy_count}, Error: ${error_count}"

# Terminate agents in 'error' state
[ -z "$error_ids" ] || echo "$error_ids" | xargs -tL1 drone server destroy

# Get new metrics after termination
get_drone_metrics

# Log the post-termination status
log_to_cloudwatch "Post-termination status: Total: ${total_count}, Healthy: ${healthy_count}, Error: ${error_count}"
