#!/usr/bin/env ruby

# This script migrates CAP (Child Account Policy) data from properties to separate indexed columns.

require 'ruby-progressbar'
require_relative '../../../dashboard/config/environment'

# @see https://github.com/code-dot-org/code-dot-org/pull/52244
CAP_RELEASE_DATE = DateTime.parse('2023-06-09')
users = User.with_deleted.where(current_sign_in_at: CAP_RELEASE_DATE..)

total_successes = 0
total_failures = 0

update_progress_title = proc {"Processed[%c/%C]: |%W| Updated: #{total_successes}; Failed: #{total_failures}; %a"}
progress_bar = ProgressBar.create(total: users.count, format: update_progress_title.call)

log_path = CDO.dir('log', "user_cap_state_updates_#{Time.now.utc.strftime('%Y%m%dT%H%M%S')}.json")
FileUtils.mkdir_p File.dirname(log_path)
File.write(log_path, '{}')

log_operation = proc do |status, user, message|
  failed = status == 'failed'
  progress_bar.log "[#{Time.now.utc.iso8601}] #{status.capitalize} to update User[#{user.id}]: #{message}".colorize(failed ? :red : :green)

  log_data = JSON.load_file(log_path)
  log_data[status] ||= {}
  log_data[status][user.id] = message
  File.write log_path, JSON.pretty_generate(log_data)

  failed ? total_failures += 1 : total_successes += 1
  progress_bar.format update_progress_title.call
end

batch_size = 10_000
users.in_batches(of: batch_size) do |users_batch|
  cap_users = users_batch.
    select(
      :id,
      :cap_state,
      :cap_state_date,
      "properties->>'$.child_account_compliance_state' AS original_cap_state",
      "properties->>'$.child_account_compliance_state_last_updated' AS original_cap_state_date"
    ).
    where(cap_state: nil).
    where("properties->>'$.child_account_compliance_state' IS NOT NULL").
    where("properties->>'$.child_account_compliance_state' != ''")

  cap_users.find_each do |user|
    user.update_columns(
      cap_state: user.original_cap_state == 's' ? Policies::ChildAccount::ComplianceState::LOCKED_OUT : user.original_cap_state,
      cap_state_date: user.original_cap_state_date.presence && DateTime.parse(user.original_cap_state_date).utc
    )

    log_operation.call('succeeded', user, user.as_json(only: %i[cap_state cap_state_date]))
  rescue StandardError => exception
    log_operation.call('failed', user, exception.inspect)
  end

  progress_bar.progress += batch_size
rescue ProgressBar::InvalidProgressError
  progress_bar.finish
end

progress_bar.log "Log file: #{log_path}"
progress_bar.log "Finished at: #{Time.now.utc.iso8601}"
