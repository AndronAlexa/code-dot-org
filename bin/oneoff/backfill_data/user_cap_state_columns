#!/usr/bin/env ruby

# This script migrates CAP (Child Account Policy) data from properties to separate indexed columns.

require 'ruby-progressbar'
require_relative '../../../dashboard/config/environment'

# @see https://github.com/code-dot-org/code-dot-org/pull/52244
CAP_RELEASE_DATE = DateTime.parse('2023-06-09')

users = User.with_deleted.where(current_sign_in_at: CAP_RELEASE_DATE..)
total_updated = 0
failed_user_ids = []

update_progress_title = proc {|num_updates = 1| "Processed[%c/%C]: |%W| Updated: #{total_updated += num_updates} %a"}
progress_bar = ProgressBar.create(total: users.count, format: update_progress_title.call(0))

users.select(
  :id,
  :cap_state,
  :cap_state_date,
  "properties->>'$.child_account_compliance_state' AS original_cap_state",
  "properties->>'$.child_account_compliance_state_last_updated' AS original_cap_state_date"
).find_each(batch_size: 10_000) do |user|
  next if user.cap_state || user.original_cap_state.blank?

  user.update_columns(
    cap_state: user.original_cap_state == 's' ? Policies::ChildAccount::ComplianceState::LOCKED_OUT : user.original_cap_state,
    cap_state_date: user.original_cap_state_date.presence && DateTime.parse(user.original_cap_state_date)
  )

  progress_bar.format update_progress_title.call
rescue StandardError => exception
  failed_user_ids << user.id
  progress_bar.log "Error updating User[#{user.id}]: #{exception.inspect}".red
ensure
  progress_bar.increment
end

puts "Failed to update #{failed_user_ids.size} users: #{failed_user_ids.inspect}".yellow unless failed_user_ids.empty?
