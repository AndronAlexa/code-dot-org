# These are commands that maintain the software in the container.

# All of the install commands extend the isolated 'web-base' which
# means they run without having to spin up a database, etc.
# If any command depends on a service, it needs to specify that itself.

include:
  - path: ./docker-compose.localstack.yml

services:
  # This just installs / updates rbenv / Ruby inside the web instance
  install-rbenv:
    extends:
      file: docker-compose.dashboard.yml
      service: web-base
    hostname: install-rbenv
    volumes:
      - rbenv:/home/cdodev/.rbenv
      - ../../.ruby-version:/app/src/.ruby-version
      - .:/app/src # This is not the application source code!
    command: /bin/bash -l -c "./install-local-rbenv.sh"

  # This just installs / updates nvm / Node / nvm inside the web instance
  install-nvm:
    extends:
      file: docker-compose.dashboard.yml
      service: web-base
    hostname: install-nvm
    volumes:
      - nvm:/home/cdodev/.nvm
      - ../../apps/package.json:/app/src/apps/package.json
      - .:/app/src # This is not the application source code!
    command: /bin/bash -l -c "./install-local-nvm.sh"

  # This just installs the Ruby gems, in case they have changed
  install-gems:
    extends:
      file: docker-compose.dashboard.yml
      service: web-base
    volumes:
      - rbenv:/home/cdodev/.rbenv
      - ../..:/app/src
    command: /bin/bash -l -c "bundle install"

  # Installs the node/npm/js libraries
  install-js:
    extends:
      file: docker-compose.dashboard.yml
      service: web-base
    volumes:
      - nvm:/home/cdodev/.nvm
      - ../../docker:/app/src/docker
      - ../../apps:/app/src/apps
    working_dir: /app/src/apps
    command: /bin/bash -l -c '../docker/developers/run.sh yarn install'

  install-localstack:
    image: amazon/aws-cli
    depends_on:
      localstack-contained:
        condition: service_healthy
    environment:
      - AWS_ACCESS_KEY_ID=local-development
      - AWS_SECRET_ACCESS_KEY=local-development
      - AWS_DEFAULT_REGION=us-east-1
      - AWS_ENDPOINT_URL=http://localstack:4566
    entrypoint: /bin/bash -c
    command: |-
      "
      aws s3api create-bucket --bucket cdo-animation-library;
      aws s3api put-bucket-versioning --bucket cdo-animation-library --versioning-configuration Status=Enabled;
      aws s3api create-bucket --bucket cdo-v3-animations --object-lock-enabled-for-bucket;
      aws s3api create-bucket --bucket cdo-v3-assets --object-lock-enabled-for-bucket;
      aws s3api create-bucket --bucket cdo-v3-files --object-lock-enabled-for-bucket;
      aws s3api create-bucket --bucket cdo-v3-libraries --object-lock-enabled-for-bucket;
      aws s3api create-bucket --bucket cdo-v3-sources --object-lock-enabled-for-bucket;
      aws s3api create-bucket --bucket cdo-ai --object-lock-enabled-for-bucket;
      aws s3api create-bucket --bucket videos.code.org;
      aws secretsmanager describe-secret --secret-id \"development/cdo/firebase_secret\" 2>/dev/null || \
      aws secretsmanager create-secret --name \"development/cdo/firebase_secret\" --secret-string \"placeholder-firebase-secret\"
      aws secretsmanager describe-secret --secret-id \"development/cdo/firebase_shared_secret\" 2>/dev/null || \
      aws secretsmanager create-secret --name \"development/cdo/firebase_shared_secret\" --secret-string \"placeholder-firebase-shared-secret\"
      aws secretsmanager describe-secret --secret-id \"development/cdo/slack_bot_token\" 2>/dev/null || \
      aws secretsmanager create-secret --name \"development/cdo/slack_bot_token\" --secret-string \"placeholder-slack-token\"
      "
    networks:
      cdo_network_test:
      cdo_network:
